View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 51)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 50.5)})
data <- data.frame(prices, total_payoff)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 50)})
data <- data.frame(prices, total_payoff)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 49)})
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51)+ short_put(i, 51)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51.5) + long_put(i, 51)+ short_put(i, 51)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 49) + long_put(i, 51)+ short_put(i, 51)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 49.5)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 50)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51)})
data <- data.frame(prices, total_payoff)
total_payoff<- sapply(prices, function(i){long_call(i,49) + short_call(i, 50)})
data <- data.frame(prices, total_payoff)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51)})
data <- data.frame(prices, total_payoff)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 50)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 51)})
data <- data.frame(prices, total_payoff)
prices <- seq(1, 100, by=0.2)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 51)})
data <- data.frame(prices, total_payoff)
View(data)
prices <- seq(1, 100, by=0.5)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 51) + short_put(i, 51)})
data <- data.frame(prices, total_payoff)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 50.5) + short_put(i, 50.5)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 50.5) + long_put(i, 50.5) + short_put(i, 50.5)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50.5) + short_call(i, 50.5) + long_put(i, 50.5) + short_put(i, 50.5)})
data <- data.frame(prices, total_payoff)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 50.5) + long_put(i, 50.5) + short_put(i, 50.5)})
data <- data.frame(prices, total_payoff)
View(data)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_put(i, 50.5) + short_put(i, 50.5)})
data <- data.frame(prices, total_payoff)
View(data)
prices <- seq(1, 100, by=0.5)
total_payoff_spike<- sapply(prices, function(i){long_call(i,50) + long_call(i, 51) + short_call(i, 50.5) + short_call(i, 50.5)})
data_spike <- data.frame(prices, total_payoff_spike)
View(data_spike)
prices <- seq(1, 100, by=0.5)
total_payoff<- sapply(prices, function(i){long_call(i,50) + short_call(i, 51) + long_call(i,50) + long_call(i, 51) + short_call(i, 50.5) + short_call(i, 50.5)})
data <- data.frame(prices, total_payoff)
View(data)
scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip=3)
scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip=3)
kings = scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip=3)
kingstimeseries <- ts(kings)
births = scan("https://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries = ts(births, frequency = 12, start = c(1946, 1))
births
birthstimeseries
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenir
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
plot.ts(kingstimeseries)
plot.ts(birthtimeseries)
plot.ts(birthstimeseries)
install.packages("TTR")
library(TTR)
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot1 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){long_call(i, 50) + short_put(i, 50) -2})
data <- data.frame(prices, total_payoff)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q1. Total payoff of portfolio for stock price $1 to $100")
return("The portfolio consists of \n 1. Long call at strike price $50 \n 2. Short put at strike price $50.")
print(plot)
}
cat(GeneratePlot1())
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot1 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){long_call(i, 50) + short_put(i, 50) -2})
data <- data.frame(prices, total_payoff)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q1. Total payoff of portfolio for stock price $1 to $100")
print(plot)
return("The portfolio consists of \n 1. Long call at strike price $50 \n 2. Short put at strike price $50.")
}
cat(GeneratePlot1())
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot2 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){short_put(i, 50) + short_call(i, 50) + 6})
data <- data.frame(prices, total_payoff)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q2. Total payoff of portfolio for stock price $1 to $100")
print(plot)
return("The portfolio consists of \n 1. Short put at strike price $50 \n 2. Short call at strike price $50")
}
cat(GeneratePlot2())
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot3 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){long_call(i,50) + long_call(i, 58) + 2*short_call(i, 54)})
total_payoff_put <- sapply(prices, function(i){long_put(i, 50) + long_put(i, 58) + 2*short_put(i, 54)})
data <- data.frame(prices, total_payoff)
data2 <- data.frame(prices, total_payoff_put)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using call options")
print(plot)
plot2<-ggplot(data2, aes(prices, total_payoff_put))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using put options")
print(plot2)
return("The portfolio consists of \n 1. Long call at strike price $50 \n 2. Long call at strike price $58
\n 3, Two short calls at strike price $54 \n Alternatively, with put options \n
The portfolio consists of \n 1. Long put at strike price $50 \n 2. Long put at strike price $58
\n 3, Two short puts at strike price $54")
}
cat(GeneratePlot3()) #print portfolio returned by function to the console
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot3 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){long_call(i,50) + long_call(i, 58) + 2*short_call(i, 54)})
total_payoff_put <- sapply(prices, function(i){long_put(i, 50) + long_put(i, 58) + 2*short_put(i, 54)})
data <- data.frame(prices, total_payoff)
data2 <- data.frame(prices, total_payoff_put)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using call options")
print(plot)
plot2<-ggplot(data2, aes(prices, total_payoff_put))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using put options")
print(plot2)
return("The portfolio consists of \n 1. Long call at strike price $50 \n 2. Long call at strike price $58
\n 3, Two short calls at strike price $54 \n Alternatively, with put options
The portfolio consists of \n 1. Long put at strike price $50 \n 2. Long put at strike price $58
3. Two short puts at strike price $54")
}
cat(GeneratePlot3()) #print portfolio returned by function to the console
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot3 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){long_call(i,50) + long_call(i, 58) + 2*short_call(i, 54)})
total_payoff_put <- sapply(prices, function(i){long_put(i, 50) + long_put(i, 58) + 2*short_put(i, 54)})
data <- data.frame(prices, total_payoff)
data2 <- data.frame(prices, total_payoff_put)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using call options")
print(plot)
plot2<-ggplot(data2, aes(prices, total_payoff_put))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using put options")
print(plot2)
return("The portfolio consists of \n 1. Long call at strike price $50 \n 2. Long call at strike price $58
\n 3, Two short calls at strike price $54 \n Alternatively, with put options
The portfolio consists of \n 1. Long put at strike price $50 \n 2. Long put at strike price $58\n3. Two short puts at strike price $54")
}
cat(GeneratePlot3()) #print portfolio returned by function to the console
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot3 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){long_call(i,50) + long_call(i, 58) + 2*short_call(i, 54)})
total_payoff_put <- sapply(prices, function(i){long_put(i, 50) + long_put(i, 58) + 2*short_put(i, 54)})
data <- data.frame(prices, total_payoff)
data2 <- data.frame(prices, total_payoff_put)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using call options")
print(plot)
plot2<-ggplot(data2, aes(prices, total_payoff_put))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using put options")
print(plot2)
return("The portfolio consists of \n 1. Long call at strike price $50 \n 2. Long call at strike price $58 \n 3, Two short calls at strike price $54 \n Alternatively, with put options \n The portfolio consists of \n 1. Long put at strike price $50 \n 2. Long put at strike price $58\n3. Two short puts at strike price $54")
}
cat(GeneratePlot3()) #print portfolio returned by function to the console
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using call options")
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot3 <- function(){
prices <- seq(1, 100, by=1)
total_payoff<- sapply(prices, function(i){long_call(i,50) + long_call(i, 58) + 2*short_call(i, 54)})
total_payoff_put <- sapply(prices, function(i){long_put(i, 50) + long_put(i, 58) + 2*short_put(i, 54)})
data <- data.frame(prices, total_payoff)
data2 <- data.frame(prices, total_payoff_put)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using call options")
print(plot)
plot2<-ggplot(data2, aes(prices, total_payoff_put))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q3. Total payoff of portfolio for stock price $1 to $100 using put options")
print(plot2)
return("The portfolio consists of \n 1. Long call at strike price $50 \n 2. Long call at strike price $58 \n 3. Two short calls at strike price $54 \n Alternatively, with put options \n The portfolio consists of \n 1. Long put at strike price $50 \n 2. Long put at strike price $58\n 3. Two short puts at strike price $54")
}
cat(GeneratePlot3()) #print portfolio returned by function to the console
library(ggplot2)
long_call<- function(st, k){
return (max(st-k, 0))
}
short_call<- function(st, k){
return (min(k-st, 0))
}
long_put <- function(st, k){
return (max(k-st, 0))
}
short_put <- function(st, k){
return (min(st-k, 0))
}
GeneratePlot4 <- function(){
prices<- seq(1, 100, by = 0.1)
total_payoff<- sapply(prices, function(i){2* long_call(i,50) +  2*short_call(i, 50.5)})
data <- data.frame(prices, total_payoff)
plot<-ggplot(data, aes(prices, total_payoff))+
geom_line() +
xlab("Stock Price") + ylab("Total Payoff") +
ggtitle("Q4. Total payoff of portfolio for stock price $1 to $100")
print(plot)
return("The portfolio consists of \n 1. 2 long calls at strike price $50 \n 2. 2 short calls at strike price $50.5 ")
}
cat(GeneratePlot4()) #prints portfolio returned by function
library(readr)
library(arules)
library(arulesViz)
data <- read_csv("Dataset Cleaned.csv")
setwd("C:/Users/Saandra/Desktop/Project Task")
data <- read_csv("Dataset Cleaned.csv")
for(i in 3:16){
low_label = paste("Low", i)
medium_label = paste("Medium", i)
high_label = paste("High", i)
data[[i]] = discretize(data[[i]], method = "frequency", breaks = 3, labels = c(low_label, medium_label, high_label))
}
View(data)
basket_data = data[,-c(1,2,17)]
View(basket_data)
basket_data = data[,c(1,3,8,9,13)]
View(basket_data)
write.csv(basket_data,"mb1.csv", quote = FALSE, row.names = FALSE)
transactions = read.transactions("mb1.csv", format='basket', sep=',')
summary(transactions)
View(basket_data)
View(basket_data)
library(readr)
library(arules)
library(arulesViz)
data <- read_csv("Dataset Cleaned.csv")
#Discretizing
for(i in 3:16){
low_label = paste("Low", i)
medium_label = paste("Medium", i)
high_label = paste("High", i)
data[[i]] = discretize(data[[i]], method = "frequency", breaks = 3, labels = c(low_label, medium_label, high_label))
}
basket_data = data[,-c(1,2,17)]
basket_data = basket_data[,c(1,3,8,9,13)]
write.csv(basket_data,"mb1.csv", quote = FALSE, row.names = FALSE)
View(basket_data)
transactions = read.transactions("mb1.csv", format='basket', sep=',')
summary(transactions)
association_rules <- apriori(transactions, parameter = list(supp=0.5, conf=0.8, maxlen=10))
inspect(rules[1:10])
association_rules <- apriori(transactions, parameter = list(supp=0.5, conf=0.8, maxlen=10))
inspect(association_rules[1:10])
association_rules <- apriori(transactions, parameter = list(supp=0.01, conf=0.8, maxlen=10))
inspect(association_rules[1:10])
association_rules <- apriori(transactions, parameter = list(supp=0.01, conf=0.9, maxlen=10))
inspect(association_rules[1:10])
inspect(association_rules[1:3])
association_rules <- apriori(transactions, parameter = list(supp=0.01, conf=0.8, maxlen=10))
inspect(association_rules[1:10])
View(data)
data <- read_csv("Dataset Cleaned.csv")
#Discretizing
for(i in 3:16){
low_label = paste("Low", i)
medium_label = paste("Medium", i)
high_label = paste("High", i)
data[[i]] = discretize(data[[i]], method = "frequency", breaks = 3, labels = c(low_label, medium_label, high_label))
}
basket_data = data[,-c(1,2,17)]
basket_data_1= basket_data[,c(1,2,3,4,5)]
basket_data_2 = basket_data[,c(1,6,7,8,9)]
basket_data_3 = basket_data[,c(1,10,11,12,13,14)]
write.csv(basket_data_1,"mb1.csv", quote = FALSE, row.names = FALSE)
write.csv(basket_data_2,"mb2.csv", quote = FALSE, row.names = FALSE)
write.csv(basket_data_3,"mb3.csv", quote = FALSE, row.names = FALSE)
transactions = read.transactions("mb1.csv", format='basket', sep=',')
summary(transactions)
association_rules <- apriori(transactions, parameter = list(supp=0.01, conf=0.8, maxlen=10))
inspect(association_rules[1:10])
inspect(subset(association_rules, subset = lhs %oin% c("Low 3", "Medium 3", "High 3")))
inspect(subset(association_rules, subset = lhs %oin% c("Low 3")))
inspect(subset(association_rules, subset = lhs %oin% c("Low 7")))
transactions = read.transactions("mb2.csv", format='basket', sep=',')
summary(transactions)
association_rules <- apriori(transactions, parameter = list(supp=0.01, conf=0.8, maxlen=10))
inspect(subset(association_rules, subset = lhs %oin% c("Low 3", "Medium 3", "High 3")))
inspect(association_rules[1:10])
View(data)
transactions = read.transactions("mb3.csv", format='basket', sep=',')
summary(transactions)
association_rules <- apriori(transactions, parameter = list(supp=0.01, conf=0.8, maxlen=10))
inspect(association_rules[1:10])
write.csv(basket_data_1,"mb1.csv", quote = FALSE, row.names = FALSE)
transactions = read.transactions("mb1.csv", format='basket', sep=',')
summary(transactions)
association_rules <- apriori(transactions, parameter = list(supp=0.01, conf=0.8, maxlen=10))
inspect(association_rules[1:10])
inspect(association_rules[1:20])
inspect(association_rules[1:30])
pkgs <- c("factoextra",  "NbClust")
install.packages(pkgs)
library(factoextra)
library(NbClust)
install.packages(pkgs)
library(factoextra)
library(NbClust)
library(readr)
library(dplyr)
library(stats)
library(arules)
library(factoextra)
library(NbClust)
data <- read_csv("Dataset Cleaned.csv")
#Discretizing
for(i in 4:16){
data[[i]] = discretize(data[[i]], method = "frequency", breaks = 3, labels = c("Low", "Medium", "High"))
}
set.seed(123)
# Elbow method
fviz_nbclust(df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
View(data)
# Elbow method
fviz_nbclust(data[3], kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
install.packages("vctrs")
set.seed(123)
# Elbow method
fviz_nbclust(data[3], kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
library(readr)
library(dplyr)
library(stats)
library(arules)
library(factoextra)
library(NbClust)
# Elbow method
fviz_nbclust(data[3], kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
# Silhouette method
fviz_nbclust(data[3], kmeans, method = "silhouette")+
labs(subtitle = "Silhouette method")
# Gap statistic
fviz_nbclust(data[3], kmeans, nstart = 25,  method = "gap_stat", nboot = 50)+
labs(subtitle = "Gap statistic method")
KMeansResult <- kmeans(data[3], 2, nstart = 20)
data$Lit_Cluster = KMeansResult$cluster
column_names = colnames(data)
for (c in c(1, 2, 3)) {
cluster_data = data %>%
filter(Lit_Cluster==c)
for(i in 4:16){
cat("In cluster", c, "For the variable", column_names[i], "\n")
con_table <- table(data[[i]])
print(prop.table(con_table))
cat("\n")
}
}
